@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using ForumProject.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ForumProject.Data

@rendermode InteractiveServer

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<div class="content-wrapper">

    <!-- Content -->

    <div class="container-xxl flex-grow-1 container-p-y">
        <!-- Basic Layout -->
        <div class="row">
            <div class="col-xl">
                <div class="card  ">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Add Aircraft</h5> <small class="text-body float-end">Default label</small>
                    </div>
                    <div class="card-body">
                        <EditForm Model="Input" FormName="book-form" OnValidSubmit="LoginUser">
                            <DataAnnotationsValidator />
                            <div class="row g-4">
                                <div class="col-md-4">
                                    <div class="form-floating mb-4 ">
                                        <InputText @bind-Value="Input.Email" type="text" class="form-control" id="floatingInputFilled" placeholder="My Stories .." />
                                        <label for="floatingInputFilled">Username</label>
                                        <ValidationMessage For="@(() => Input.Email)" />
                                        <span class="form-floating-focused"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating mb-4 ">
                                        <InputText @bind-Value="Input.Password" type="text" class="form-control" id="floatingInputFilled" placeholder="My Stories .." />
                                        <label for="floatingInputFilled">Password</label>
                                        <ValidationMessage For="@(() => Input.Password)" />
                                        <span class="form-floating-focused"></span>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <button type="submit" class="btn btn-primary waves-effect waves-light">Add</button>
                                </div>
                            </div>

                        </EditForm>
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null)
        {
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }
    }

    public async Task LoginUser()
    {
        try
        {

        
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
